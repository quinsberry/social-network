{"version":3,"sources":["hoc/withAuthRedirect.js","components/Settings/ProfileEditForm/ProfileEditForm.tsx","components/Settings/Settings.tsx","components/Settings/SettingsContainer.tsx"],"names":["withAuthRedirect","Component","connect","state","isAuth","auth","props","to","ProfileEditFormReduxForm","reduxForm","form","enableReinitialize","profile","handleSubmit","pristine","submitting","aboutMe","lookingForAJobDescription","contacts","fullName","icons","github","vk","facebook","instagram","twitter","website","youtube","mainLink","className","onSubmit","type","disabled","Field","name","placeholder","extracn","validate","component","Input","Object","entries","map","icon","index","key","src","alt","validDomain","Textarea","Settings","savePhoto","initialValues","onChange","event","files","target","length","SettingsContainer","formData","saveProfileTC","this","userId","getUserProfileTC","savePhotoTC","compose","getProfile","isFetching","getIsFetching","getUserId"],"mappings":"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","file":"static/js/5.be76f6f6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\n\r\nconst withAuthRedirect = (Component) => {\r\n  const RedirectComponent = (props) => {\r\n    if (!props.isAuth) {\r\n      return (\r\n        <Redirect to='/login' />\r\n      )\r\n    }\r\n    return <Component {...props} />\r\n  }\r\n\r\n\r\n  const mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n      isAuth: state.auth.isAuth\r\n    }\r\n  }\r\n\r\n  const ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n  return ConnectedRedirectComponent\r\n}\r\n\r\nexport default withAuthRedirect","import React from 'react';\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { Input, Textarea } from '../../common//FormsControls/FormsControls';\r\nimport { validDomain } from '../../../utils/validators';\r\n\r\nimport github from '../../../assets/icons/github.svg';\r\nimport vk from '../../../assets/icons/vk.svg';\r\nimport facebook from '../../../assets/icons/facebook.svg';\r\nimport instagram from '../../../assets/icons/instagram.svg';\r\nimport twitter from '../../../assets/icons/twitter.svg';\r\nimport website from '../../../assets/icons/website.svg';\r\nimport youtube from '../../../assets/icons/youtube.svg';\r\nimport mainLink from '../../../assets/icons/website.svg';\r\n\r\nimport './ProfileEditForm.scss';\r\n\r\nimport { TProfile, TProfileEditFormValue } from '../../../types/types';\r\n\r\ntype Props = {\r\n  profile: TProfile\r\n}\r\n\r\nconst ProfileEditForm: React.FC<InjectedFormProps<TProfileEditFormValue> & Props> = ({ profile, handleSubmit, pristine, submitting }) => {\r\n\r\n  const { aboutMe, contacts, lookingForAJobDescription, fullName } = profile;\r\n\r\n  const icons = {\r\n    github,\r\n    vk,\r\n    facebook,\r\n    instagram,\r\n    twitter,\r\n    website,\r\n    youtube,\r\n    mainLink\r\n  };\r\n\r\n  //     There is a code for finding the right contact value for each of inputs\r\n  //\r\n  // const isContactRight = (item) => {\r\n  //   const res = Object.entries(contacts).filter(contact => contact[0] === item);\r\n  //   return res[1];\r\n  // }\r\n\r\n  // Object.values(contacts).map(contact => contact !== null && contact !== '') ? isContactRight(icon[0]) :\r\n\r\n  return (\r\n    <form className=\"profile-edit-form\" onSubmit={handleSubmit}>\r\n      <div className=\"profile-edit-form__save\">\r\n        <h2>Profile settings</h2>\r\n        <button type=\"submit\" disabled={pristine || submitting} className=\"edit-descr-btn\">save</button>\r\n      </div>\r\n      <div className=\"form-wrapper\">\r\n        <div className=\"profile-edit-form__username\">\r\n          <h3>Username</h3>\r\n          <Field name=\"fullName\" placeholder={fullName ? fullName : 'Enter you full name'} extracn={'fullName'} className=\"input\" validate={[]} component={Input} />\r\n        </div>\r\n        <div className=\"profile-edit-form__about\">\r\n          <h3>About me</h3>\r\n          <Field name=\"aboutMe\" placeholder={aboutMe ? aboutMe : 'Write something about you'} extracn={'about'} className=\"input\" validate={[]} component={Input} />\r\n        </div>\r\n        <ul className=\"profile-edit-form__contacts\">\r\n          <h3>Links you can find me where:</h3>\r\n          {Object.entries(icons).map((icon, index) => {\r\n            return (\r\n              <li key={index} className=\"profile-edit-form__contacts-item\">\r\n                <img src={icon[1]} alt={`${icon[0]} icon`} />\r\n                <Field name={`contacts.${icon[0]}`} placeholder={`Enter your ${icon[0]} link`} extracn={`contacts`} className=\"input\" validate={[validDomain]} component={Input} />\r\n              </li>\r\n            )\r\n          })}\r\n        </ul>\r\n        <div className=\"profile-edit-form__lookingForAJob\">\r\n          <h3>Looking for a job</h3>\r\n          <div className=\"profile-edit-form__lookingForAJob__isLooking\">\r\n            <h5>Are you looking a job?</h5>\r\n            <Field name={'lookingForAJob'} extracn={'lookingForAJob'} className=\"input\" validate={[]} component={Input} type=\"checkbox\" />\r\n          </div>\r\n          <div className=\"profile-edit-form__lookingForAJob__isLooking-descr\">\r\n            <h5>Describe you proffesional skills</h5>\r\n            <Field name={'lookingForAJobDescription'} placeholder={lookingForAJobDescription ? lookingForAJobDescription : 'Write it here'} extracn={'lookingForAJob-descr'} className=\"textarea\" validate={[]} component={Textarea} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n\r\nconst ProfileEditFormReduxForm = reduxForm<TProfileEditFormValue, Props>({\r\n  form: 'editProfile',\r\n  enableReinitialize: true\r\n})(ProfileEditForm);\r\n\r\nexport default ProfileEditFormReduxForm;","import React, { ChangeEvent } from 'react'\r\n\r\nimport ProfileEditForm from './ProfileEditForm/ProfileEditForm'\r\n\r\nimport './Settings.scss'\r\n\r\nimport { TProfile, TProfileEditFormValue } from '../../types/types'\r\n\r\ntype Props = {\r\n  profile: TProfile | null\r\n  savePhoto: (file: File) => void\r\n  onSubmit: (data: TProfileEditFormValue) => void\r\n}\r\n\r\n\r\nconst Settings: React.FC<Props> = ({ profile, savePhoto, onSubmit }) => {\r\n\r\n  const onMainPhotoSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const files: any = event?.target.files\r\n    if (files.length) {\r\n      savePhoto(files[0])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"settings-page\">\r\n      {profile && (\r\n        <>\r\n          <ProfileEditForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n          <div className=\"settings-page__profile-imageChange\">\r\n            <h3>Change you profile photo</h3>\r\n            <input type=\"file\" onChange={onMainPhotoSelected} />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings","import React, { Component } from 'react'\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { getUserProfileTC, savePhotoTC, saveProfileTC } from '../../redux/reducers/profileReducer'\r\nimport { getProfile, getIsFetching } from '../../redux/selectors/profileSelectors'\r\nimport { getUserId } from '../../redux/selectors/authSelectors'\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect'\r\nimport Settings from './Settings'\r\n\r\nimport { TAppState, TProfile, TProfileEditFormValue } from '../../types/types'\r\n\r\ntype TMapState = {\r\n  profile: TProfile | null\r\n  isFetching: boolean\r\n  userId: number | null\r\n}\r\n\r\ntype TMapDispatch = {\r\n  getUserProfileTC: (userId: number | null) => void\r\n  savePhotoTC: (file: File) => void\r\n  saveProfileTC: (data: TProfileEditFormValue) => void\r\n}\r\n\r\ntype Props = TMapState & TMapDispatch\r\n\r\nclass SettingsContainer extends Component<Props> {\r\n\r\n  componentDidMount() {\r\n    this.props.userId && this.props.getUserProfileTC(this.props.userId)\r\n  }\r\n\r\n  onSubmit = (formData: TProfileEditFormValue) => {\r\n    this.props.saveProfileTC(formData)\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Settings profile={this.props.profile} savePhoto={this.props.savePhotoTC} onSubmit={this.onSubmit} />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: TAppState): TMapState => {\r\n  return {\r\n    profile: getProfile(state),\r\n    isFetching: getIsFetching(state),\r\n    userId: getUserId(state)\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default compose(\r\n  connect<TMapState, TMapDispatch, {}, TAppState>(mapStateToProps, {\r\n    getUserProfileTC,\r\n    savePhotoTC,\r\n    saveProfileTC\r\n  }),\r\n  withAuthRedirect\r\n)(SettingsContainer)"],"sourceRoot":""}